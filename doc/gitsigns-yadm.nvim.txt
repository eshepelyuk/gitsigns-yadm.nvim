*gitsigns-yadm.nvim.txt*             For             Last change: 2024 June 25

==============================================================================
Table of Contents                       *gitsigns-yadm.nvim-table-of-contents*

  - gitsigns-yadm.nvim                 |gitsigns-yadm.nvim-gitsigns-yadm.nvim|
  - Installation                             |gitsigns-yadm.nvim-installation|
  - Configuration                           |gitsigns-yadm.nvim-configuration|
  - Troubleshooting                       |gitsigns-yadm.nvim-troubleshooting|

GITSIGNS-YADM.NVIM                     *gitsigns-yadm.nvim-gitsigns-yadm.nvim*

This uses `gitsigns` <https://github.com/lewis6991/gitsigns.nvim>
`_on_attach_pre` function to check if the currently attached buffer is file
tracked by `yadm` <https://yadm.io/>, and if it is, sets the correct `toplevel`
and `gitdir` attributes.


INSTALLATION                                 *gitsigns-yadm.nvim-installation*

Using `lazy.nvim` <https://github.com/folke/lazy.nvim>; add this to your
`dependencies` for `gitsigns`, add a `_on_attach_pre` function to your gitsigns
configuration, passing the callback to the `yadm_signs` function:

>lua
    return {
        "lewis6991/gitsigns.nvim",
        dependencies = {
            "nvim-lua/plenary.nvim",
            "seanbreckenridge/gitsigns-yadm.nvim",
        },
        opts = {
            ...,
            _on_attach_pre = function(_, callback)
                require("gitsigns-yadm").yadm_signs(callback)
            end,
            on_attach = function(bufnr)
            ...
        }
<


CONFIGURATION                               *gitsigns-yadm.nvim-configuration*

If using a standard `yadm` setup, you likely won’t need to configure
anything.

The default computed values are:

>lua
    {
        homedir = os.getenv("HOME"),
        yadm_repo_git = vim.fn.expand("~/.local/share/yadm/repo.git"),
    }
<

You can pass those options to the `setup` function to configure:

>lua
    return {
        "lewis6991/gitsigns.nvim",
        dependencies = {
            "nvim-lua/plenary.nvim",
            {
                "seanbreckenridge/gitsigns-yadm.nvim",
                config = function ()
                    require("gitsigns-yadm").setup({ yadm_repo_git = "~/.config/yadm/repo.git "})
                end
            },
        },
<

If you want to disable this when `yadm` is not installed, you can use
`vim.fn.executable`

>lua
    _on_attach_pre = function(_, callback)
        if vim.fn.executable("yadm") == 1 then
            require("gitsigns-yadm").yadm_signs(callback)
        else
            callback()
        end
    end,
<


TROUBLESHOOTING                           *gitsigns-yadm.nvim-troubleshooting*

Ifthings don’t seem to be working, try scheduling the `yadm_signs` call so
that the `gitsigns` does not suppress the errors:

>lua
    _on_attach_pre = function(_, callback)
        vim.schedule(function()
            require("gitsigns-yadm").yadm_signs(callback)
        end)
    end,
<

and then check `:messages`.

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
